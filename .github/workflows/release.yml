name: Create Release

on:
  push:
    branches: [ main ]

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.version-check.outputs.changed }}
      new-version: ${{ steps.version-check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check if version changed
        id: version-check
        run: |
          # Get current version from mix.exs
          CURRENT_VERSION=$(grep 'version:' mix.exs | sed 's/.*version: "\(.*\)".*/\1/')
          echo "Current version: $CURRENT_VERSION"
          
          # Get previous version from mix.exs
          git checkout HEAD~1 -- mix.exs 2>/dev/null || echo "No previous version found"
          PREVIOUS_VERSION=$(grep 'version:' mix.exs | sed 's/.*version: "\(.*\)".*/\1/' 2>/dev/null || echo "0.0.0")
          echo "Previous version: $PREVIOUS_VERSION"
          
          # Restore current mix.exs
          git checkout HEAD -- mix.exs
          
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  build-and-release:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.18.1'
          otp-version: '27.1'
      
      - name: Set up Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.14.1
      
      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-
      
      - name: Install dependencies
        run: mix deps.get
      
      - name: Build releases
        run: mix release --overwrite
        env:
          MIX_ENV: prod
      
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Debug: Show complete build structure
          echo "=== Complete build directory structure ==="
          find _build -type f | sort
          
          echo "=== All focus-related files ==="
          find _build -name "*focus*" -type f -ls
          
          echo "=== Burrito output directory check ==="
          if [ -d "_build/prod/rel/focus/burrito_out" ]; then
            echo "Burrito output directory exists:"
            ls -la _build/prod/rel/focus/burrito_out/
            find _build/prod/rel/focus/burrito_out -type f -ls
          else
            echo "Burrito output directory not found"
          fi
          
          echo "=== Searching for executables ==="
          find _build -type f -executable | grep -v "/erts-" || echo "No executables found"
          
          # Copy all focus executables we can find
          FOUND_FILES=0
          for file in $(find _build -name "focus*" -type f 2>/dev/null); do
            if [ -f "$file" ] && [ -x "$file" ]; then
              filename=$(basename "$file")
              echo "Copying executable: $file -> release-assets/$filename"
              cp "$file" "release-assets/$filename"
              chmod +x "release-assets/$filename"
              FOUND_FILES=$((FOUND_FILES + 1))
            elif [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Copying file (not executable): $file -> release-assets/$filename"
              cp "$file" "release-assets/$filename"
              chmod +x "release-assets/$filename"
              FOUND_FILES=$((FOUND_FILES + 1))
            fi
          done
          
          echo "=== Found $FOUND_FILES files ==="
          
          # List what we have in release assets
          echo "=== Final release assets ==="
          ls -la release-assets/ || echo "Release assets directory is empty"
          
          # Fail if no files found
          if [ $FOUND_FILES -eq 0 ]; then
            echo "ERROR: No focus executables found!"
            exit 1
          fi
      
      - name: Create zip archives
        run: |
          cd release-assets
          for file in *; do
            if [ -f "$file" ]; then
              echo "Creating zip for: $file"
              zip "${file}.zip" "$file"
            fi
          done
          
          # List final zip files
          echo "=== Created zip files ==="
          ls -la *.zip
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ needs.check-version.outputs.new-version }}"
          name: "Release v${{ needs.check-version.outputs.new-version }}"
          body: |
            ## Focus v${{ needs.check-version.outputs.new-version }}
            
            A simple command-line focus timer that helps you focus on work.
            
            ### Downloads
            Download and extract the appropriate zip file for your platform:
            - **focus-darwin-x86_64.zip**: For Intel Macs
            - **focus-darwin-aarch64.zip**: For Apple Silicon Macs (M1/M2/M3)
            - **focus-linux-x86_64.zip**: For Linux (64-bit)
            - **focus-windows-x86_64.exe.zip**: For Windows (64-bit)
            
            ### Usage
            
            **macOS/Linux:**
            ```bash
            # Extract and make executable
            unzip focus-*.zip
            chmod +x focus*
            ./focus* [work|break|<minutes>]
            ```
            
            **Windows:**
            ```cmd
            # Extract the zip file, then run:
            focus-windows-x86_64.exe [work|break|<minutes>]
            ```
          files: release-assets/*.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}